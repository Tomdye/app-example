(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'maquette/maquette', 'dojo-core/aspect', 'dojo-core/WeakMap', './createWidget', './mixins/createContainerMixin', './mixins/createDestroyable'], factory);
    }
})(function (require, exports) {
    "use strict";
    var maquette_1 = require('maquette/maquette');
    var aspect_1 = require('dojo-core/aspect');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var createWidget_1 = require('./createWidget');
    var createContainerMixin_1 = require('./mixins/createContainerMixin');
    var createDestroyable_1 = require('./mixins/createDestroyable');
    var resizeNodePropertiesMap = new WeakMap_1.default();
    var resizingMap = new WeakMap_1.default();
    function getProjector(resizePanel) {
        var child = resizePanel;
        while (child.parent) {
            child = child.parent;
        }
        return child;
    }
    function setResizeListeners(resizePanel) {
        var onmouseupHandle;
        var onmousemoveHandle;
        function onmousedownListener(evt) {
            if (!resizingMap.get(resizePanel)) {
                evt.preventDefault();
                var projector = getProjector(resizePanel);
                resizingMap.set(resizePanel, { width: resizePanel.width, x: evt.x });
                onmouseupHandle = projector.on('mouseup', onmouseupListener);
                onmousemoveHandle = projector.on('mousemove', onmousemoveListener);
                resizePanel.invalidate();
                return true;
            }
        }
        function onmouseupListener(evt) {
            if (resizingMap.get(resizePanel)) {
                evt.preventDefault();
                resizingMap.delete(resizePanel);
                onmousemoveHandle.destroy();
                onmouseupHandle.destroy();
                resizePanel.invalidate();
                return true;
            }
        }
        function onmousemoveListener(evt) {
            var originalWidth = resizingMap.get(resizePanel);
            if (originalWidth) {
                evt.preventDefault();
                resizePanel.width = (parseInt(originalWidth.width, 10) + (evt.x - originalWidth.x)) + 'px';
                return true;
            }
        }
        var resizeNodeProperties = resizeNodePropertiesMap.get(resizePanel);
        var onmousedownHandle = aspect_1.on(resizeNodeProperties, 'onmousedown', onmousedownListener);
        return {
            destroy: function () {
                onmousedownHandle && onmousedownHandle.destroy();
                onmouseupHandle && onmouseupHandle.destroy();
                onmousemoveHandle && onmousemoveHandle.destroy();
            }
        };
    }
    var createResizePanel = createWidget_1.default
        .mixin(createContainerMixin_1.default)
        .mixin({
        mixin: {
            tagName: 'dojo-panel-resize',
            tagNames: {
                handle: 'dojo-resize-handle'
            },
            get width() {
                var resizePanel = this;
                return resizePanel.state && resizePanel.state && resizePanel.state.width;
            },
            set width(value) {
                var resizePanel = this;
                resizePanel.setState({ width: value });
            }
        },
        aspectAdvice: {
            after: {
                getChildrenNodes: function (result) {
                    var resizePanel = this;
                    result.push(maquette_1.h(resizePanel.tagNames.handle, resizeNodePropertiesMap.get(resizePanel)));
                    return result;
                },
                getNodeAttributes: function (result) {
                    var resizePanel = this;
                    result = result || {};
                    result.styles = result.styles || {};
                    result.styles['width'] = resizePanel.width || '200px';
                    return result;
                }
            }
        }
    })
        .mixin({
        mixin: createDestroyable_1.default,
        initialize: function (instance) {
            resizeNodePropertiesMap.set(instance, {});
            instance.own(setResizeListeners(instance));
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createResizePanel;
});
//# sourceMappingURL=_debug/createResizePanel.js.map