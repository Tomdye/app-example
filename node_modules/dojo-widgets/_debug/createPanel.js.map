{"version":3,"file":"createPanel.js","sourceRoot":"","sources":["createPanel.ts"],"names":[],"mappings":";;;;;;;;;IAIA,6BAAiE,gBAAgB,CAAC,CAAA;IAClF,qCAA4E,+BAA+B,CAAC,CAAA;IAC5G,qCAAiG,+BAA+B,CAAC,CAAA;IAiBjI,IAAM,WAAW,GAAiB,sBAAY;SAC5C,KAAK,CAAC,8BAAoB,CAAC;SAC3B,KAAK,CAAC,8BAAoB,CAAC;SAC3B,MAAM,CAAC;QACP,OAAO,EAAE,YAAY;KACrB,CAAC,CAAC;IAEJ;sBAAe,WAAW,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport { EventedListener, TargettedEventObject } from 'dojo-compose/mixins/createEvented';\nimport { StateChangeEvent } from 'dojo-compose/mixins/createStateful';\nimport { Handle } from 'dojo-core/interfaces';\nimport createWidget, { Widget, WidgetState, WidgetOptions } from './createWidget';\nimport createCloseableMixin, { Closeable, CloseableState, CloseEvent } from './mixins/createCloseableMixin';\nimport createContainerMixin, { ContainerMixin, ContainerMixinState, ContainerMixinOptions } from './mixins/createContainerMixin';\nimport { Renderable } from './mixins/createRenderable';\n\nexport interface PanelState extends WidgetState, CloseableState, ContainerMixinState {\n\tlabel?: string;\n}\n\nexport interface PanelOptions extends WidgetOptions<PanelState>, ContainerMixinOptions<PanelState> { }\n\nexport interface Panel extends Widget<PanelState>, Closeable<PanelState>, ContainerMixin<Renderable, PanelState> {\n\ton(type: 'close', listener: EventedListener<CloseEvent>): Handle;\n\ton(type: 'statechange', listener: EventedListener<StateChangeEvent<PanelState>>): Handle;\n\ton(type: string, listener: EventedListener<TargettedEventObject>): Handle;\n}\n\nexport interface PanelFactory extends ComposeFactory<Panel, PanelOptions> { }\n\nconst createPanel: PanelFactory = createWidget\n\t.mixin(createCloseableMixin)\n\t.mixin(createContainerMixin)\n\t.extend({\n\t\ttagName: 'dojo-panel'\n\t});\n\nexport default createPanel;\n"]}