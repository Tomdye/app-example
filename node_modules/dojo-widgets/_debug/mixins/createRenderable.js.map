{"version":3,"file":"createRenderable.js","sourceRoot":"","sources":["createRenderable.ts"],"names":[],"mappings":";;;;;;;;;IACA,wBAAwC,sBAAsB,CAAC,CAAA;IA+B/D,sBAA6B,KAAU;QACtC,MAAM,CAAC,KAAK,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC;IACpD,CAAC;IAFe,oBAAY,eAE3B,CAAA;IAED,IAAM,gBAAgB,GAAsB,iBAAO,CAAgC;QACjF,MAAM,EAAmB,IAAI;QAC7B,OAAO,EAAE,KAAK;KACd,EAAE,UAAC,QAAQ,EAAE,OAAO;QACpB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrB,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YACpC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACpB,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAClC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrB,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YACpC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACpB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;IAEJ;sBAAe,gBAAgB,CAAC","sourcesContent":["import { VNode } from 'maquette/maquette';\nimport compose, { ComposeFactory } from 'dojo-compose/compose';\nimport { ParentMixin } from './createParentMixin';\n\nexport interface RenderFunction {\n\t(): VNode;\n}\n\nexport interface RenderableOptions {\n\t/**\n\t * A render function to be used.\n\t */\n\trender?: RenderFunction;\n\n\ttagName?: string;\n\n\tparent?: ParentMixin<any>;\n}\n\nexport interface Renderable {\n\t/**\n\t * Takes no arguments and returns a VNode\n\t */\n\trender(): VNode;\n\n\ttagName: string;\n\n\tparent?: ParentMixin<this>;\n}\n\nexport interface RenderableFactory extends ComposeFactory<Renderable, RenderableOptions> { }\n\nexport function isRenderable(value: any): value is Renderable {\n\treturn value && typeof value.render === 'function';\n}\n\nconst createRenderable: RenderableFactory = compose<Renderable, RenderableOptions>({\n\t\trender: <RenderFunction> null,\n\t\ttagName: 'div'\n\t}, (instance, options) => {\n\t\tif (options) {\n\t\t\tif (options.tagName) {\n\t\t\t\tinstance.tagName = options.tagName;\n\t\t\t}\n\t\t\tif (options.render) {\n\t\t\t\tinstance.render = options.render;\n\t\t\t}\n\t\t\tif (options.tagName) {\n\t\t\t\tinstance.tagName = options.tagName;\n\t\t\t}\n\t\t\tif (options.parent) {\n\t\t\t\toptions.parent.append(instance);\n\t\t\t}\n\t\t}\n\t});\n\nexport default createRenderable;\n"]}